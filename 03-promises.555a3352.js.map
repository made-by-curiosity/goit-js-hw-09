{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,yBAC1CC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,kBAAmBJ,SAASC,cAAc,yBA+C5C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,SAASQ,EAAwBT,EAAUC,GACzC,MAAMS,EAAU,uBAAqBV,QAAiBC,MAEtDU,EAAArB,GAASsB,OAAOC,QAAQH,E,CAG1B,SAASI,EAAsBd,EAAUC,GACvC,MAAMS,EAAU,sBAAoBV,QAAiBC,MAErDU,EAAArB,GAASsB,OAAOG,QAAQL,E,CAS1B,SAASM,IAGPL,EAAArB,GAASsB,OAAOK,QAFA,8E,CA9ElBzB,EAAKC,kBAAkByB,iBAAiB,SAExC,SAA2BC,GACzB,MAAMC,EAAaC,OAAO7B,EAAKI,gBAAgB0B,OACzCC,EAAYF,OAAO7B,EAAKK,eAAeyB,OACvCE,EAASH,OAAO7B,EAAKM,kBAAkBwB,OAC7C,IAAIG,EAAiBL,EAIrB,GAFAD,EAAEO,iBAEEF,EAAS,IAEX,YAuEJ,WACE,MAAMd,EAAU,yFAEhBC,EAAArB,GAASsB,OAAOK,QAAQP,E,CA3EtBiB,GAIF,GACiC,KAA/BnC,EAAKI,gBAAgB0B,OACS,KAA9B9B,EAAKK,eAAeyB,OACpBE,GAAU,EAGV,YAkDJ,WACE,MAAMd,EAAU,gEAEhBC,EAAArB,GAASsB,OAAOK,QAAQP,E,CAtDtBkB,IAqEJ,SAAoBR,EAAYG,EAAWC,GACzChC,EAAKC,kBAAkBoC,UAAW,EAClC,MAAMC,EAAYV,EAAad,KAAKyB,IAAIR,GAAaC,EACrDhB,YAAW,KACThB,EAAKC,kBAAkBoC,UAAW,CAAK,GACtCC,E,CAtEHE,CAAWZ,EAAYG,EAAWC,GAElC,IAAK,IAAIS,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAAG,CACnC,GAAIR,EAAiB,EAAG,CACtBT,IACA,K,CAGFjB,EAAckC,EAAGR,GACdS,MAAK,EAAClC,SAAEA,EAAQC,MAAEA,MACjBQ,EAAwBT,EAAUC,EAAM,IAEzCkC,OAAM,EAACnC,SAAEA,EAAQC,MAAEA,MAClBa,EAAsBd,EAAUC,EAAM,IAG1CwB,GAAkBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  createPromisesBtn: document.querySelector('button[type=\"submit\"]'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  delayStepInput: document.querySelector('input[name=\"step\"]'),\n  delaysAmountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.createPromisesBtn.addEventListener('click', onPromiseBtnClick);\n\nfunction onPromiseBtnClick(e) {\n  const firstDelay = Number(refs.firstDelayInput.value);\n  const delayStep = Number(refs.delayStepInput.value);\n  const amount = Number(refs.delaysAmountInput.value);\n  let promiseTimeout = firstDelay;\n\n  e.preventDefault();\n\n  if (amount > 100) {\n    showTooManyPromisesNotification();\n    return;\n  }\n\n  if (\n    refs.firstDelayInput.value === '' ||\n    refs.delayStepInput.value === '' ||\n    amount <= 0\n  ) {\n    showEmptyFieldsNotification();\n    return;\n  }\n\n  btnDisable(firstDelay, delayStep, amount);\n\n  for (let i = 1; i <= amount; i += 1) {\n    if (promiseTimeout < 0) {\n      showTimeoutNotification();\n      break;\n    }\n\n    createPromise(i, promiseTimeout)\n      .then(({ position, delay }) => {\n        showSuccessNotification(position, delay);\n      })\n      .catch(({ position, delay }) => {\n        showErrorNotification(position, delay);\n      });\n\n    promiseTimeout += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction showSuccessNotification(position, delay) {\n  const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n\n  Notiflix.Notify.success(message);\n}\n\nfunction showErrorNotification(position, delay) {\n  const message = `❌ Rejected promise ${position} in ${delay}ms`;\n\n  Notiflix.Notify.failure(message);\n}\n\nfunction showEmptyFieldsNotification() {\n  const message = `Все поля должны быть заполнены, а Amount должен быть больше 0`;\n\n  Notiflix.Notify.warning(message);\n}\n\nfunction showTimeoutNotification() {\n  const message = `Время таймаута не может быть меньше 0. Пожалуйста, выберите другие значения`;\n\n  Notiflix.Notify.warning(message);\n}\n\nfunction showTooManyPromisesNotification() {\n  const message = `Ну это слишком! Вы уверены, что вам нужно столько промисов? Я бы не выбирал больше 100`;\n\n  Notiflix.Notify.warning(message);\n}\n\nfunction btnDisable(firstDelay, delayStep, amount) {\n  refs.createPromisesBtn.disabled = true;\n  const totalTime = firstDelay + Math.abs(delayStep) * amount;\n  setTimeout(() => {\n    refs.createPromisesBtn.disabled = false;\n  }, totalTime);\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","createPromisesBtn","document","querySelector","firstDelayInput","delayStepInput","delaysAmountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$showSuccessNotification","message","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$showErrorNotification","failure","$47d4ff9957288465$var$showTimeoutNotification","warning","addEventListener","e","firstDelay","Number","value","delayStep","amount","promiseTimeout","preventDefault","$47d4ff9957288465$var$showTooManyPromisesNotification","$47d4ff9957288465$var$showEmptyFieldsNotification","disabled","totalTime","abs","$47d4ff9957288465$var$btnDisable","i","then","catch"],"version":3,"file":"03-promises.555a3352.js.map"}