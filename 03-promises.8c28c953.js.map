{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,yBAC1CC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,kBAAmBJ,SAASC,cAAc,yBA0B5C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,SAASQ,EAAwBT,EAAUC,GACzC,IAAMS,EAAU,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,MAE9DW,EAAAtB,GAASuB,OAAOC,QAAQJ,E,CAG1B,SAASK,EAAsBf,EAAUC,GACvC,IAAMS,EAAU,sBAAqCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,MAE3DW,EAAAtB,GAASuB,OAAOG,QAAQN,E,CA/C1BlB,EAAKC,kBAAkBwB,iBAAiB,SAExC,SAA2BC,GACzB,IAAMC,EAAaC,OAAO5B,EAAKI,gBAAgByB,OACzCC,EAAYF,OAAO5B,EAAKK,eAAewB,OACvCE,EAASH,OAAO5B,EAAKM,kBAAkBuB,OACzCG,EAAiBL,EAErBD,EAAEO,iBAEF,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChC3B,EAAc2B,EAAGF,GACdG,MAAK,SAAAC,GACJnB,EADemB,EAAR5B,SAAe4B,EAAL3B,M,IAGlB4B,OAAM,SAAAD,GACLb,EADgBa,EAAR5B,SAAe4B,EAAL3B,M,IAItBuB,GAAkBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  createPromisesBtn: document.querySelector('button[type=\"submit\"]'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  delayStepInput: document.querySelector('input[name=\"step\"]'),\n  delaysAmountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.createPromisesBtn.addEventListener('click', onPromiseBtnClick);\n\nfunction onPromiseBtnClick(e) {\n  const firstDelay = Number(refs.firstDelayInput.value);\n  const delayStep = Number(refs.delayStepInput.value);\n  const amount = Number(refs.delaysAmountInput.value);\n  let promiseTimeout = firstDelay;\n\n  e.preventDefault();\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, promiseTimeout)\n      .then(({ position, delay }) => {\n        showSuccessNotification(position, delay);\n      })\n      .catch(({ position, delay }) => {\n        showErrorNotification(position, delay);\n      });\n\n    promiseTimeout += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction showSuccessNotification(position, delay) {\n  const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n\n  Notiflix.Notify.success(message);\n}\n\nfunction showErrorNotification(position, delay) {\n  const message = `❌ Rejected promise ${position} in ${delay}ms`;\n\n  Notiflix.Notify.failure(message);\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","createPromisesBtn","document","querySelector","firstDelayInput","delayStepInput","delaysAmountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$showSuccessNotification","message","concat","$parcel$interopDefault","Notify","success","$ce04d3a99e08e73b$var$showErrorNotification","failure","addEventListener","e","firstDelay","Number","value","delayStep","amount","promiseTimeout","preventDefault","i","then","param","catch"],"version":3,"file":"03-promises.8c28c953.js.map"}